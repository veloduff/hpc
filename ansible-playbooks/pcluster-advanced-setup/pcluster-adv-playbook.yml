---
- name: Create AWS ParallelCluster with Lustre
  hosts: localhost
  gather_facts: false
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
    cluster_name: "advanced-cluster"
    
  tasks:
    - name: Check required variables
      fail:
        msg: "Required variable {{ item }} is not defined"
      when: vars[item] is not defined or vars[item] == ''
      loop:
        - headnode_instance_type
        - batch_instance_type
        - batch_min_count
        - batch_max_count
        - ssh_user
        - placement_group_name
    - name: Create cluster configuration file from ParallelCluster template (pcluster-adv-template.yaml)
      template:
        src: pcluster-adv-template.yaml
        dest: "./ansible-generated-pcluster-adv-config.yaml"

    - name: Create ParallelCluster cluster
      shell: |
        pcluster create-cluster \
          --cluster-name {{ cluster_name }} \
          --cluster-configuration ansible-generated-pcluster-adv-config.yaml
      register: cluster_create
      
    - name: Display cluster creation output
      debug:
        msg: "{{ cluster_create.stdout }}"

    - name: Wait for cluster to be ready
      shell: |
        pcluster describe-cluster --cluster-name {{ cluster_name }} | jq -r '.clusterStatus'
      register: cluster_status
      until: cluster_status.stdout == "CREATE_COMPLETE"
      retries: 60
      delay: 60
      
    - name: Get cluster info
      shell: |
        pcluster describe-cluster --cluster-name {{ cluster_name }}
      register: cluster_info
      
    - name: Display cluster information
      debug:
        msg: "{{ cluster_info.stdout }}"

    - name: Get head node IP
      shell: |
        pcluster describe-cluster --cluster-name {{ cluster_name }} | jq -r '.headNode.publicIpAddress'
      register: head_node_ip
      
    - name: Save head node IP to file
      copy:
        content: |
          Head Node IP: {{ head_node_ip.stdout }}
          SSH Command: ssh -i {{ key_path }} {{ ssh_user }}@{{ head_node_ip.stdout }}
        dest: "./ansible-generated-pcluster-adv-access.txt"
        
    - name: Wait for SSH to be available on head node
      wait_for:
        host: "{{ head_node_ip.stdout }}"
        port: 22
        delay: 30
        timeout: 300
        
    - name: Copy required scripts to head node
      shell: |
        scp -i {{ key_path }} -o StrictHostKeyChecking=no -o ControlMaster=no ../../Cluster_Setup/cluster_setup.sh {{ ssh_user }}@{{ head_node_ip.stdout }}:~/
        scp -i {{ key_path }} -o StrictHostKeyChecking=no -o ControlMaster=no ../../Cluster_Setup/install_pkgs.sh {{ ssh_user }}@{{ head_node_ip.stdout }}:~/
        scp -i {{ key_path }} -o StrictHostKeyChecking=no -o ControlMaster=no ./pcluster-adv-post-install-wrapper.sh {{ ssh_user }}@{{ head_node_ip.stdout }}:~/
      register: copy_scripts
      
    - name: Run post-install wrapper on head node
      shell: |
        ssh -i {{ key_path }} -o StrictHostKeyChecking=no -o ControlMaster=no {{ ssh_user }}@{{ head_node_ip.stdout }} \
          "chmod +x ~/pcluster-adv-post-install-wrapper.sh ~/cluster_setup.sh ~/install_pkgs.sh && \
           ~/pcluster-adv-post-install-wrapper.sh"
      register: post_install_output
      
    - name: Display post-install output
      debug:
        msg: "{{ post_install_output.stdout }}"
        
    - name: Display access information
      debug:
        msg: |
          Cluster {{ cluster_name }} is ready!
          Head Node IP: {{ head_node_ip.stdout }}
          SSH: ssh -i {{ key_path }} {{ ssh_user }}@{{ head_node_ip.stdout }}